{"version":3,"sources":["components/NavBar/StyledNavBar.js","components/NavBar/NavBar.js","config.js","components/Login/StyledLogin.js","components/Login/Login.js","components/Home/StyledHome.js","components/Home/Home.js","components/People/People.js","components/People/Profile.js","components/People/Feed.js","components/Chatroom2/Chatroom.js","components/Chatroom/StyledChatroom.js","components/ChatMemberList/StyledChatMemberList.js","components/ChatMemberList/ChatMemberList.js","components/Chatroom/Chatroom.js","App.js","serviceWorker.js","index.js"],"names":["StyledNavBar","styled","nav","NavBar","props","useState","loggedIn","setLoggedIn","useEffect","window","addEventListener","sessionStorage","getItem","className","to","onClick","removeItem","children","BACKEND_URL","StyledLogin","div","Login","email","setEmail","password","setPassword","error","setError","handleChange","event","target","type","value","console","log","onSubmit","preventDefault","credentials","axios","post","then","response","status","Error","setItem","data","jwt","handleAuthResponse","a","async","token","customHeaders","headers","get","getUserId","catch","id","name","aria-describedby","onChange","StyledHome","Home","People","getRelatedFields","item","output","map","field","push","updateSelectedUser","userid","update","state","friends","setState","selectedUser","followUser","follow_user","localStorage","options","Axios","unfollowUser","unfollow_user","input","filteredFriends","e","this","res","query","filter","toLowerCase","includes","key","Card","Row","Body","Title","first_name","last_name","Text","username","Container","onChangeHandler","bind","Col","md","href","Header","age","Footer","Button","variant","React","Component","Profile","profile","following","followers","posts","match","params","user","arr","length","lonely","list","post_title","post_content","created_at","renderList","renderPosts","withRouter","MyProfile","friend_id","my_posts","id_index","post_filter","i","useridToName","renderMyPosts","renderFollowingPosts","message","placeholder","togglePostFilterMe","togglePostFilterEveryone","Chatroom","chatrooms","selected_room","room_info","room_users","room_messages","info","users","messages","room_name","user_id","renderRooms","renderChat","renderParticipants","StyledChatroom","StyledChatMemberList","aside","ChatMemberList","chatMembers","setChatMembers","chatroomId","fetch","json","freshChatMembers","App","path","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6adcc491.chunk.js","sourcesContent":["import styled from 'styled-components';\n\n\nconst StyledNavBar = styled.nav`\n  display: flex;\n  border: solid blue 2px;\n  color: palevioletred;\n  justify-content: space-between;\n`;\n\nexport default StyledNavBar;\n","import React, { useState, useEffect } from \"react\";\nimport {Link} from \"react-router-dom\";\nimport StyledNavBar from './StyledNavBar';\n\nfunction NavBar(props) {\n  const [loggedIn, setLoggedIn] = useState(false);\n  \n\n  /**\n   * Determins whether the user is logged in based off of the session storage.\n   * @returns {boolean}\n   */\n  function isLoggedIn() {\n    if (!sessionStorage.getItem(\"userId\")) {\n      return false;\n    };\n\n    return true;\n  }\n\n  /**\n   * Removes the userID and jwt token from the session storage.\n   */\n  function logout() {\n    sessionStorage.removeItem(\"userId\");\n    sessionStorage.removeItem(\"jwt\");\n  }\n\n  useEffect(() => {\n    window.addEventListener('storage', () => {\n      if (!window.sessionStorage.getItem('userId')) {\n        setLoggedIn(false);\n      }\n    })\n  }, []);\n\n  return (\n    <StyledNavBar className=\"navbar container-flex navbar-dark bg-dark fixed-top\">\n      <Link to=\"/\" className=\"navbar-link\">Home</Link>\n      <Link to=\"/chatroom\" className=\"navbar-link\">Chat</Link>\n      <Link to=\"/people\" className=\"navbar-link\">People</Link>\n      <Link to={`/profile/${window.sessionStorage.getItem('userId')}`} className=\"navbar-link\">My Profile</Link>\n      <Link to=\"/feed\" className=\"navbar-link\">Feed</Link>\n      \n\n      <h3 className=\"navbar-text\">GA Bot</h3>\n      {!loggedIn &&\n        <div className=\"authentication-grouping col-3\">\n          <Link to=\"/login\" className=\"pr-4\">Login</Link>\n          <Link to=\"/signup\">Sign Up</Link>\n        </div>\n      }\n      {loggedIn &&\n        <button onClick={() => logout()}>Logout</button>\n      }\n      {props.children}\n    </StyledNavBar >\n  );\n}\n\nexport default NavBar;\n","const BACKEND_URL = \"\"\n\nexport {BACKEND_URL};\n","import styled from 'styled-components';\n\nconst StyledLogin = styled.div`\n  color: green;\n  margin-top: 10rem;\n  border: solid green 2px;\n\n  #error-message {\n    color: red;\n  }\n`;\n\nexport default StyledLogin;\n","import React, { useState, useEffect } from \"react\";\nimport { BACKEND_URL } from \"../../config\";\nimport StyledLogin from './StyledLogin.js';\nimport axios from 'axios';\n\n/*\n * Provides the interface for a user to login\n * @todo what endpoint does the login form need to go to? Guessing '/login'\n */\nexport default function Login(props) {\n\n  /* Create a state */\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState(false);\n\n  /*\n   * Logs into rails using knock-gem JWT auth.\n   * Stores token in sessionStorage under key 'jwt'\n   * Stores userId under key \"userId\"\n   */\n  function handleLogin(event) {\n\n    /**\n     * Gets the user id from backend by passing the current token\n     */\n    async function getUserId() {\n      const token = sessionStorage.getItem('jwt');\n      const customHeaders = { headers: { \"Authorization\": \"Bearer \" + token } }\n      const response = axios.get(BACKEND_URL + '/user/whatsmyid', customHeaders)\n      return response;\n    };\n\n    /**\n     * Handles the error message\n     */\n    function handleAuthError(errorMessage) {\n      setError(true);\n    };\n\n    /**\n     * Stores the user id in session storage\n     */\n    function storeUserId(data) {\n      window.sessionStorage.setItem('userId', data);\n    };\n\n    event.preventDefault();\n    const credentials = {\n      \"auth\": {\n        \"email\": email,\n        \"password\": password\n      }\n    };\n\n    axios.post(BACKEND_URL + '/user_token', credentials)\n      .then(response => handleAuthResponse(response), error => handleAuthError(error))\n      .then(() => getUserId())\n      .then(response => storeUserId(response.data))\n      .catch(response => console.log('ahhhh', response));\n  };\n\n\n\n  /**\n   * If http code is 201, store JWT token in sessionStorage.\n   * If http code is 404, show error\n   */\n  function handleAuthResponse(response) {\n    console.log('response');\n    console.log(response);\n    if ((response.status == 200) || (response.status == 201)) {\n      sessionStorage.setItem('jwt', response.data.jwt);\n    } else {\n      throw new Error('An Error occured.');\n    };\n\n  };\n\n  /** sets the state variable when an input field changes */\n  function handleChange(event) {\n    switch (event.target.type) {\n      case 'email':\n        setEmail(event.target.value);\n        break;\n      case 'password':\n        setPassword(event.target.value);\n        break;\n      default:\n        console.log('input field type not recognised as username or password');\n        console.log('input type:', event.target.type, 'type:', typeof event.target.type);\n    }\n  };\n\n  useEffect(() => {\n    let loggedIn = !!sessionStorage.getItem('userId');\n    if (loggedIn) {\n      setError(false);\n    };\n  }, []);\n\n  return (\n    <StyledLogin>\n      <form onSubmit={handleLogin}>\n        <h3>Login</h3>\n        {error ?\n          <p id=\"error-message\">An error occured. Please try again.</p>\n          :\n          null\n        }\n        <div className=\"form-group\">\n          <label>Email address</label>\n          <input name=\"something\"\n            type=\"email\"\n            className=\"form-control\"\n            id=\"exampleInputEmail1\"\n            aria-describedby=\"emailHelp\"\n            onChange={handleChange}\n          />\n          <small id=\"emailHelp\" className=\"form-text text-muted\">\n            We'll never share your email with anyone else.\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <label>Password</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            id=\"exampleInputPassword1\"\n            onChange={handleChange}\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Submit\n        </button>\n      </form>\n    </StyledLogin>\n  );\n}\n","import styled from 'styled-components';\n\nconst StyledHome = styled.div`\n  border: solid red 2px;\n  background-color: palevioletred;\n`;\n\nexport default StyledHome;\n","import React, {useState, useEffect} from 'react';\n\nimport styled from 'styled-components';\nimport StyledHome from './StyledHome.js';\n\nfunction Home(props) {\n  return (\n    <StyledHome>\n      <p>Home component</p>\n    </StyledHome>\n  );\n}\n\nexport default Home;\n","// import React, { PureComponent as Component } from 'react';\nimport React from 'react';\nimport Axios from 'axios';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport { BACKEND_URL } from \"../../config\";\nexport default class People extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            friends: [],\n            input: '',\n            filteredFriends: [],\n            selectedUser: {},\n        };\n    }\n\n    onChangeHandler(e){\n        this.setState({\n            input: e.target.value,\n        });\n    }\n\n    // componentDidMount() {\n    //     const FriendURL = 'http://localhost:3010/read_people';\n    //     Axios.get(FriendURL)      \n    //             .then(res => {const query = res.data;\n    //                 this.setState({ friends: query});\n    //     })\n    // }\n\n    componentDidMount() {\n        const token = sessionStorage.getItem('jwt');\n        const customHeaders = { headers: { \"Authorization\": \"Bearer \" + token } }\n        const response = Axios\n        .get(BACKEND_URL + '/read_people', customHeaders)\n        .then(res => {const query = res.data;\n            this.setState({ friends: query});\n        })\n        return response;\n    }\n\n    getRelatedFields = (item) => {\n        const output = [];\n        const fields = ['first_name', 'last_name', 'email', 'username']\n        fields.map(field => output.push(item[field]))\n        return output;\n    }\n\n    updateSelectedUser = (userid) => {\n        const update = this.state.friends[userid - 1];\n        this.setState({\n            selectedUser: update,\n        });\n    }\n\n    followUser = () => {\n        const follow_user = {\n            \"query\": {\n                \"user_id\": window.localStorage.getItem(\"userId\"),\n                \"friend_id\": this.state.selectedUser.id\n            }\n        };\n        const token = sessionStorage.getItem('jwt');\n        const options = { headers: { \"Authorization\": \"Bearer \" + token } }\n        Axios.post(BACKEND_URL + '/follow', follow_user, options);\n        console.log('hi')\n    }\n\n    unfollowUser = () => {\n        const unfollow_user = {\n            \"query\": {\n                \"user_id\": window.localStorage.getItem(\"userId\"),\n                \"friend_id\": this.state.selectedUser.id\n            }\n        };\n        const token = sessionStorage.getItem('jwt');\n        const options = { headers: { \"Authorization\": \"Bearer \" + token } }\n        Axios.post(BACKEND_URL + '/follow', unfollow_user, options);\n        console.log('hi')\n    }\n\n    render() {\n        const {friends} = this.state;\n        this.friends = friends\n            .filter(item => {\n                const relatedFieldsArray = this.getRelatedFields(item);\n                const searched = relatedFieldsArray.map(item => item.toLowerCase().includes(this.state.input.toLowerCase()));\n                return searched.includes(true) ? item : null;\n            })\n            .map((item, key) =>\n                    <span onClick={() => this.updateSelectedUser(item.id)}>\n                        <Card>\n                            <Row>\n                                <Card.Body>\n                                <Card.Title>{item.first_name} {item.last_name}</Card.Title>\n                                <Card.Text>\n                                    @{item.username}\n                                </Card.Text>\n                                </Card.Body>\n                            </Row>\n                        </Card>\n                    </span>\n            );\n\n        return(\n            \n            <Container>\n                <Row>\n                    <h1>break</h1>\n                </Row>\n                <Row>\n                    <h1>.</h1>\n                </Row>\n                <Row>\n                    <input value={this.state.input} type=\"text\" onChange={this.onChangeHandler.bind(this)}/>\n                </Row>\n                <Row>\n                    <Col md={4}>\n                        {this.friends}\n                    </Col>\n                    <Col md={8}>\n                        <Card>\n                            <a href={`/profile/${this.state.selectedUser.id}`}>\n                                <Card.Header>\n                                    <h1>{this.state.selectedUser.first_name} {this.state.selectedUser.last_name}</h1>\n                                </Card.Header>\n                                <Card.Body>\n                                    <Card.Title>@{this.state.selectedUser.username}</Card.Title>\n                                    <Card.Text>{this.state.selectedUser.age}</Card.Text>\n                                    <Card.Text>{this.state.selectedUser.email}</Card.Text>\n                                </Card.Body>\n                            </a>\n                            <Card.Footer>\n                                <Button variant=\"primary\" onClick={() => this.followUser()}>Follow</Button>\n                                <Button variant=\"outline-primary\" onClick={() => this.unfollowUser()}>Unfollow</Button>\n                            </Card.Footer>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n\n}\n","import React from 'react';\nimport Axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Image from 'react-bootstrap/Image'\nimport Button from 'react-bootstrap/Button'\nimport { BACKEND_URL } from \"../../config\";\n\nclass Profile extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            profile: [],\n            following: [],\n            followers: [],\n            posts: [],\n        };\n    }\n\n    componentDidMount() {\n        const token = sessionStorage.getItem('jwt');\n        const customHeaders = { headers: { \"Authorization\": \"Bearer \" + token } };\n        const userid = this.props.match.params.id;\n        const response = Axios\n        .get(BACKEND_URL + `/profile/${userid}`, customHeaders)\n        .then(res => {const query = res.data;\n            this.setState({ \n                profile: query.user,\n                following: query.following,\n                followers: query.followers,\n                posts: query.posts,\n            });\n        })\n        return response;\n    }\n\n    renderList(arr) {\n        if(arr.length < 1) {\n            this.lonely = \n                <Card>\n                    <Row>\n                        <Card.Body>\n                        <Card.Title>No ones here :C</Card.Title>\n                        </Card.Body>\n                    </Row>\n                </Card>\n            return this.lonely\n        } else {\n            this.list = arr\n                .map((item, key) =>\n                    <a href={`/profile/${item.id}`}>\n                        <Card>\n                            <Row>\n                                <Card.Body>\n                                <Card.Title>{item.first_name} {item.last_name}</Card.Title>\n                                <Card.Text>\n                                    @{item.username}\n                                </Card.Text>\n                                </Card.Body>\n                            </Row>\n                        </Card>\n                    </a>\n                )\n            return this.list\n        }\n    }\n\n    renderPosts() {\n        const arr = this.state.posts\n        if(arr.length < 1) {\n            this.lonely = \n                <Card>\n                    <Card.Header>\n                        <Card.Title>{this.state.profile.first_name} hasnt posted anything :C</Card.Title>\n                    </Card.Header>\n                    <Card.Body>\n                        <Card.Text>...</Card.Text>\n                    </Card.Body>\n                </Card>\n            return this.lonely\n        } else {\n            this.list = arr\n                .map((item, key) =>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>{item.post_title}</Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                {item.post_content}\n                            </Card.Text>\n                        </Card.Body>\n                        <Card.Footer className=\"text-muted\">\n                            {item.created_at}\n                        </Card.Footer>\n                    </Card>\n                )\n            return this.list\n        }\n    }\n\n    render() {\n        const profile = this.state.profile;\n\n        return(\n            <Container>\n                <Row>\n                    <h1>break</h1>\n                </Row>\n                <Row>\n                    <h1>.</h1>\n                </Row>\n                <Row>\n                    <Col md={3}>\n                        <h1>Following {this.state.following.length}</h1>\n                        {this.renderList(this.state.following)}\n                    </Col>\n\n                    <Col md={6}>\n                        <Card>\n                            <Card.Header>\n                                <h1>{profile.first_name} {profile.last_name}</h1>\n                            </Card.Header>\n                            <Card.Body>\n                                <Card.Text>@{profile.username}</Card.Text>\n                                <Card.Text>{profile.age}</Card.Text>\n                                <Card.Text>{profile.email}</Card.Text>\n                            </Card.Body>\n                        </Card>\n                        {this.renderPosts()}\n                    </Col>\n\n                    <Col md={3}>\n                        <h1>{this.state.followers.length} Followers</h1>\n                        {this.renderList(this.state.followers)}\n                    </Col>\n\n                </Row>\n            </Container>\n        )\n    }\n\n}\n\nexport default withRouter(Profile);","import React from 'react';\nimport Axios from 'axios';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport { BACKEND_URL } from \"../../config\";\n\nexport default class MyProfile extends React.Component {\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            profile: [],\n            following: [],\n            followers: [],\n            posts: [],\n            my_posts: [],\n            id_index: {},\n            post_filter: \"everyone\"\n        };\n    }\n\n    componentDidMount() {\n        const token = sessionStorage.getItem('jwt');\n        const customHeaders = { headers: { \"Authorization\": \"Bearer \" + token } };\n        const userid = sessionStorage.getItem('userId');\n        const response = Axios\n        .get(BACKEND_URL + `/feed/${userid}`, customHeaders)\n        .then(res => {const query = res.data;\n            this.setState({ \n                profile: query.user,\n                following: query.following,\n                followers: query.followers,\n                posts: query.posts,\n                my_posts: query.my_posts,\n            });\n        })\n        return response;\n    }\n\n    useridToName() {\n        const arr = this.state.following\n        for(let i = 0; i < arr.length; i++) {\n            const index = this.state.id_index\n            index[arr[i].id] = {\n                \"first_name\": arr[i].first_name,\n                \"last_name\": arr[i].last_name,\n                \"username\": arr[i].username,\n            }\n        }\n    }\n\n    useridParser(id, field) {\n        const index = this.state.id_index\n        var query = index.id.field\n        return query\n    }\n\n    renderMyPosts() {\n        const arr = this.state.my_posts\n        if(arr.length < 1) {\n            this.lonely = \n                <Card>\n                    <Card.Header>\n                        <Card.Title>no posts :C</Card.Title>\n                    </Card.Header>\n                    <Card.Body>\n                        <Card.Text>...</Card.Text>\n                    </Card.Body>\n                </Card>\n            return this.lonely\n        } else {\n            this.list = arr\n                .map((item, key) =>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>{item.post_title}</Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Text>\n                                {item.post_content}\n                            </Card.Text>\n                        </Card.Body>\n                        <Card.Footer className=\"text-muted\">\n                            {item.created_at}\n                        </Card.Footer>\n                    </Card>\n                )\n            return this.list\n        }\n    }\n\n    renderFollowingPosts() {\n        this.useridToName()\n        console.log(this.state)\n        const arr = this.state.posts\n        if(arr.length < 1) {\n            this.lonely = \n                <Card>\n                    <Card.Header>\n                        <Card.Title>no posts :C</Card.Title>\n                    </Card.Header>\n                    <Card.Body>\n                        <Card.Text>...</Card.Text>\n                    </Card.Body>\n                </Card>\n            return this.lonely\n        } else {\n            this.list = arr\n                .map((item, key) =>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>{item.first_name} {item.last_name}</Card.Title>\n                            <Card.Text>@{item.username}</Card.Text>\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Title>{item.post_title}</Card.Title>\n                            <Card.Text>\n                                {item.post_content}\n                            </Card.Text>\n                        </Card.Body>\n                        <Card.Footer className=\"text-muted\">\n                            {item.created_at}\n                        </Card.Footer>\n                    </Card>\n                )\n            return this.list\n        }\n    }\n\n    togglePostFilterMe(e) {\n        this.setState({\n            post_filter: \"me\"\n        });\n        console.log(\"clicked\")\n    }\n\n    togglePostFilterEveryone(e) {\n        this.setState({\n            post_filter: \"everyone\"\n        });\n        console.log(\"clicked\")\n    }\n\n    renderPosts() {\n        if(this.state.post_filter === \"me\") {\n            return this.renderMyPosts()\n        } else {\n            return this.renderFollowingPosts()\n        }\n    }\n\n    renderList(arr) {\n        if(arr.length < 1) {\n            this.lonely = \n                <Card>\n                    <Row>\n                        <Card.Body>\n                        <Card.Title>No ones here :C</Card.Title>\n                        </Card.Body>\n                    </Row>\n                </Card>\n            return this.lonely\n        } else {\n            this.list = arr\n                .map((item, key) =>\n                        <Card>\n                            <Row>\n                                <Card.Body>\n                                <a href={`/profile/${item.id}`}>\n                                <Card.Title>{item.first_name} {item.last_name}</Card.Title>\n                                </a>\n                                <Card.Text>\n                                    @{item.username}\n                                </Card.Text>\n                                <span onClick={() => this.unfollowUser(item.id)}>\n                                    <Button variant=\"outline-primary\">Unfollow</Button>\n                                </span>\n                                </Card.Body>\n                            </Row>\n                        </Card>\n                )\n            return this.list\n        }\n    }\n\n    postSomething() {\n        const message = {\n            \"query\": {\n                \"user_id\": window.localStorage.getItem(\"userId\"),\n                \"post_title\": '',\n                \"post_content\": '',\n            }\n        };\n        const token = sessionStorage.getItem('jwt');\n        const options = { headers: { \"Authorization\": \"Bearer \" + token } }\n        Axios.post(BACKEND_URL + '/follow', message, options);\n        console.log('hi')\n    }\n\n    unfollowUser = (friend_id) => {\n        const unfollow_user = {\n            \"query\": {\n                \"user_id\": window.localStorage.getItem(\"userId\"),\n                \"friend_id\": friend_id\n            }\n        };\n        const token = sessionStorage.getItem('jwt');\n        const options = { headers: { \"Authorization\": \"Bearer \" + token } }\n        Axios.post(BACKEND_URL + '/follow', unfollow_user, options);\n        console.log('hi')\n    }\n\n    render() {\n\n        return(\n            <Container>\n                <Row>\n                    <h1>break</h1>\n                </Row>\n                <Row>\n                    <h1>.</h1>\n                </Row>\n                <Row>\n                    <Col md={4}>\n                        <h1>Following {this.state.following.length}</h1>\n                        {this.renderList(this.state.following)}\n                    </Col>\n\n                    <Col md={8}>\n                        \n                        <Card>\n                            <Card.Header>\n                                <Card.Title>\n                                    <input type=\"string\" placeholder=\"Title\"></input>\n                                </Card.Title>\n                            </Card.Header>\n                            <Card.Body>\n                                <Card.Text>\n                                    <input type=\"string\" placeholder=\"Content\"></input>\n                                </Card.Text>\n                            </Card.Body>\n\n                            \n\n                            <Button variant=\"primary\">Post</Button>\n                            <span onClick={() => this.togglePostFilterMe()}>\n                                <Button variant=\"outline-primary\">My Posts</Button>\n                            </span>\n                            <span onClick={() => this.togglePostFilterEveryone()}>\n                                <Button variant=\"outline-primary\">Following Posts</Button>\n                            </span>\n                        </Card>\n                        {this.renderPosts()}\n                    </Col>\n\n                </Row>\n            </Container>\n        )\n    }\n\n}","import React from 'react';\nimport Axios from 'axios';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport { BACKEND_URL } from \"../../config\";\n\nexport default class Chatroom extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            chatrooms: [],\n            selected_room: 1,\n            room_info: [],\n            room_users: [],\n            room_messages: [],\n        };\n    }\n\n    componentDidMount() {\n        const token = sessionStorage.getItem('jwt');\n        const customHeaders = { headers: { \"Authorization\": \"Bearer \" + token } }\n        const response = Axios\n        .get(BACKEND_URL + `/chatroom/${this.state.selected_room}`, customHeaders)\n        .then(res => {const query = res.data;\n            this.setState({ \n                chatrooms: query.chatrooms,\n                room_info: query.info,\n                room_users: query.users,\n                room_messages: query.messages\n            });\n        })\n        return response;\n    }\n\n        renderRooms() {\n            this.list = this.state.chatrooms\n                .map((item, key) =>\n                    <Card>\n                        <Row>\n                            <Col>\n                                <Card.Body>\n                                <Card.Title>{item.room_name}</Card.Title>\n                                <Card.Text>\n                                    filler text\n                                </Card.Text>\n                                </Card.Body>\n                            </Col>\n                        </Row>\n                    </Card>\n                )\n            return this.list\n        }\n\n        renderChat() {\n            this.list = this.state.room_messages\n                .map((item, key) =>\n                    <Card>\n                        <Row>\n                            <Col>\n                                <Card.Header>\n                                    {item.user_id}\n                                </Card.Header>\n                            </Col>\n                            <Col>\n                                <Card.Body>\n                                    <Card.Text>\n                                        {item.message}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Col>\n                        </Row>\n                    </Card>\n                )\n            return this.list\n        }\n\n        renderParticipants() {\n            this.list = this.state.room_users\n                .map((item, key) =>\n                    <a href={`/profile/${item.id}`}>\n                        <Card>\n                            <Row>\n                                <Card.Body>\n                                <Card.Title>{item.first_name} {item.last_name}</Card.Title>\n                                <Card.Text>\n                                    @{item.username}\n                                </Card.Text>\n                                </Card.Body>\n                            </Row>\n                        </Card>\n                    </a>\n                )\n            console.log(this.state)\n            return this.list\n        }\n\n    render() {\n        return(\n            <Container>\n                <Row>\n                    <h1>break</h1>\n                </Row>\n                <Row>\n                    <h1>.</h1>\n                </Row>\n                <Row>\n                    <Col md={3}>\n                        <h1>chatroom list:</h1>\n                        {this.renderRooms()}\n                    </Col>\n\n                    <Col md={6}>\n                        <h1>{this.state.room_info.room_name}</h1>\n                        {this.renderChat()}\n                        <Row>\n                            <input type=\"string\"/>\n                            <Button variant=\"primary\">Send</Button>\n                        </Row>\n                    </Col>\n\n                    <Col md={3}>\n                        <h1>chat participants</h1>\n                        {this.renderParticipants()}\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}","import styled from 'styled-components';\n\nconst StyledChatroom = styled.div`\n  background-color: palevioletred;\n`;\n\nexport default StyledChatroom;\n","import styled from 'styled-components';\n\nconst StyledChatMemberList = styled.aside`\n  border: solid violet 2px;\n`;\n\nexport default StyledChatMemberList;\n","import React, {useState, useEffect} from 'react';\nimport StyledChatMemberList from './StyledChatMemberList';\nimport {BACKEND_URL} from '../../config.js';\n\n/*\n * Renders a Vertical list of chatroom members for the current chatroom.\n * @param {String} chatroomId - The chatroom ID.\n */\nfunction ChatMemberList(props) {\n  const [chatMembers, setChatMembers] = useState([]);\n\n  \n\n  /*\n   * Gets a list of members in the chatroom.\n   * Updates the state to hold this array.\n   * @param {String} chatroomId - The chatroomId\n   */\n  function updateChatMembers(chatroomId) {\n    fetch(BACKEND_URL + '/chatroom/members')\n      .then(response => response.json())\n      .then(freshChatMembers => setChatMembers(chatMembers = freshChatMembers));\n  };\n\n  updateChatMembers(props.chatroomId);\n  \n  return (\n    <StyledChatMemberList>\n      <p>===BEGIN STYLED_CHAT_MEMBER_LIST===</p>\n      {chatMembers}j\n      <p>===END STYLED_CHAT_MEMBER_LIST===</p>\n    </StyledChatMemberList>\n  );\n};\n\nexport default ChatMemberList;\n","import React, { useState, useEffect } from 'react';\nimport StyledChatroom from './StyledChatroom';\nimport StyledChatMemberList from '../ChatMemberList/ChatMemberList.js';\n\nfunction Chatroom(props) {\n  return (\n    <StyledChatroom>\n      <p>===BEGIN STYLEDCHATROOM===</p>\n      <StyledChatMemberList />\n      <StyledChatroom />\n      <p>===END STYLEDCHATROOM===</p>\n    </StyledChatroom>\n  );\n};\n\nexport default Chatroom;\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport \"./App.css\";\n\nimport StyledNavBar from './components/NavBar/NavBar.js';\nimport StyledLogin from './components/Login/Login.js';\nimport SignUp from './components/Login/Login.js';\nimport Home from './components/Home/Home.js';\n\nimport People from './components/People/People.js';\nimport Profile from './components/People/Profile.js';\nimport Feed from './components/People/Feed.js';\n\nimport Chatroom from './components/Chatroom2/Chatroom.js';\nimport StyledChatroom from './components/Chatroom/Chatroom.js';\n\nfunction App() {\n  return (\n    <Router>\n      <StyledNavBar />\n\n      <Switch>\n        <Route path='/feed'>\n          <Feed />\n        </Route>  \n        <Route path='/chatroom'>\n          <Chatroom />\n        </Route>\n        <Route path='/profile/:id'>\n          <Profile />\n        </Route>\n        <Route path='/people'>\n          <People />\n        </Route>\n        <Route path='/chatroom'>\n          <StyledChatroom />\n        </Route>\n        <Route path='/profile'>\n          <StyledLogin />\n        </Route>\n        <Route path='/login'>\n          <StyledLogin />\n        </Route>\n        <Route path='/signup'>\n          <SignUp />\n        </Route>\n        <Route path='/'>\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}